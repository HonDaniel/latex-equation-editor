<template>
  <div class="editor-container">
    <!-- Button Panel -->
    <ButtonPanel 
      @button-click="addLatex"
      @show-popup="showPopup = true"
      @show-fraction-popup="openFractionPopup"
      @show-sqrt-popup="openSqrtPopup"
    />

    <!-- Textarea -->
    <textarea
      class="latex-input"
      v-model="latexCode"
      placeholder="Type or use buttons to insert LaTeX"
      @input="updatePreview"
    ></textarea>

    <!-- Rendered Output -->
    <div class="latex-output" v-html="renderedOutput"></div>
	
	<button @click="showGenericPopup = true">Test Popup</button>

    <!-- Generic Popup -->
    <GenericPopup
      v-if="showGenericPopup"
      :title="popupTitle"
      :fields="popupFields"
      @submit="handlePopupSubmit"
      @close-popup="showGenericPopup = false"
    />
  </div>
</template>

<script>
import { ref } from "vue";
import katex from "katex";
import "katex/dist/katex.min.css";
import ButtonPanel from "./ButtonPanel.vue";
import GenericPopup from "./GenericPopup.vue";

export default {
  components: { ButtonPanel, GenericPopup },
  setup() {
    const latexCode = ref("");
    const renderedOutput = ref("");
    const showGenericPopup = ref(false);
    const popupTitle = ref("");
    const popupFields = ref([]);

    const updatePreview = () => {
      try {
        renderedOutput.value = katex.renderToString(latexCode.value, { throwOnError: false });
      } catch {
        renderedOutput.value = "Invalid LaTeX syntax";
      }
    };

    const addLatex = (code) => {
      latexCode.value += code;
      updatePreview();
    };
	
	const openTestPopup = () => {
  popupTitle.value = "Test Popup";
  popupFields.value = [
    { label: "Test Field 1", placeholder: "Enter something", value: "" },
    { label: "Test Field 2", placeholder: "Enter something else", value: "" },
  ];
  showGenericPopup.value = true;
};

    const openFractionPopup = () => {
      popupTitle.value = "Add Fraction";
      popupFields.value = [
        { label: "Numerator", placeholder: "Enter numerator", value: "" },
        { label: "Denominator", placeholder: "Enter denominator", value: "" },
      ];
      showGenericPopup.value = true;
    };

    const openSqrtPopup = () => {
      popupTitle.value = "Add Square Root";
      popupFields.value = [
        { label: "Square Root Value", placeholder: "Enter value", value: "" },
      ];
      showGenericPopup.value = true;
    };

    const handlePopupSubmit = (values) => {
      if (popupTitle.value === "Add Fraction") {
        const [numerator, denominator] = values;
        latexCode.value += `\\frac{${numerator}}{${denominator}}`;
      } else if (popupTitle.value === "Add Square Root") {
        const [sqrtValue] = values;
        latexCode.value += `\\sqrt{${sqrtValue}}`;
      }
      showGenericPopup.value = false;
      updatePreview();
    };
	
	const popupTitle = ref("");
	const popupFields = ref([]);
	const showGenericPopup = ref(false);
	
	const openTestPopup = () => {
		popupTitle.value = "Test Popup";
		popupFields.value = [
			{ label: "Test Field 1", placeholder: "Enter something", value: "" },
			{ label: "Test Field 2", placeholder: "Enter something else", value: "" },
		];
		console.log("Popup Title:", popupTitle.value);
	console.log("Popup Fields:", popupFields.value);
  showGenericPopup.value = true;
  console.log("Show Popup:", showGenericPopup.value);
};

    return {
      latexCode,
      renderedOutput,
      showGenericPopup,
      popupTitle,
      popupFields,
      addLatex,
      openFractionPopup,
      openSqrtPopup,
      handlePopupSubmit,
    };
  },
};
</script>



<style>
.editor-container {
  display: flex;
  flex-direction: column;
  gap: 20px;
  width: 80%;
  margin: auto;
}

.latex-input {
  width: 100%;
  height: 200px;
  font-size: 16px;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.latex-output {
  border: 1px solid #ccc;
  padding: 20px;
  min-height: 100px;
  font-size: 18px;
  background: white;
  overflow-y: auto;
  border-radius: 5px;
}
</style>
